# Generated by Django 3.1.7 on 2022-01-18 15:45

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Official',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Location')),
                ('report_date', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('time', models.TimeField(blank=True, null=True)),
                ('p_type', models.CharField(default='official', max_length=150)),
                ('official_type', models.CharField(default='Vehicle collision', max_length=200)),
                ('data_source', models.CharField(max_length=200)),
                ('metadata', models.CharField(max_length=500)),
                ('details', models.TextField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateTimeField(auto_now_add=True, verbose_name='Date reported')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Location')),
                ('date', models.DateTimeField(default=None, verbose_name='When was the incident?')),
                ('p_type', models.CharField(choices=[('collision', 'collision'), ('nearmiss', 'nearmiss'), ('theft', 'theft'), ('hazard', 'hazard'), ('newInfrastructure', 'newInfrastructure'), ('official', 'official')], max_length=150, verbose_name='Type of report')),
                ('age', models.CharField(blank=True, choices=[('2009', '2009'), ('2008', '2008'), ('2007', '2007'), ('2006', '2006'), ('2005', '2005'), ('2004', '2004'), ('2003', '2003'), ('2002', '2002'), ('2001', '2001'), ('2000', '2000'), ('1999', '1999'), ('1998', '1998'), ('1997', '1997'), ('1996', '1996'), ('1995', '1995'), ('1994', '1994'), ('1993', '1993'), ('1992', '1992'), ('1991', '1991'), ('1990', '1990'), ('1989', '1989'), ('1988', '1988'), ('1987', '1987'), ('1986', '1986'), ('1985', '1985'), ('1984', '1984'), ('1983', '1983'), ('1982', '1982'), ('1981', '1981'), ('1980', '1980'), ('1979', '1979'), ('1978', '1978'), ('1977', '1977'), ('1976', '1976'), ('1975', '1975'), ('1974', '1974'), ('1973', '1973'), ('1972', '1972'), ('1971', '1971'), ('1970', '1970'), ('1969', '1969'), ('1968', '1968'), ('1967', '1967'), ('1966', '1966'), ('1965', '1965'), ('1964', '1964'), ('1963', '1963'), ('1962', '1962'), ('1961', '1961'), ('1960', '1960'), ('1959', '1959'), ('1958', '1958'), ('1957', '1957'), ('1956', '1956'), ('1955', '1955'), ('1954', '1954'), ('1953', '1953'), ('1952', '1952'), ('1951', '1951'), ('1950', '1950'), ('1949', '1949'), ('1948', '1948'), ('1947', '1947'), ('1946', '1946'), ('1945', '1945'), ('1944', '1944'), ('1943', '1943'), ('1942', '1942'), ('1941', '1941'), ('1940', '1940'), ('1939', '1939'), ('1938', '1938'), ('1937', '1937'), ('1936', '1936'), ('1935', '1935'), ('1934', '1934'), ('1933', '1933'), ('1932', '1932'), ('1931', '1931'), ('1930', '1930'), ('1929', '1929'), ('1928', '1928'), ('1927', '1927'), ('1926', '1926'), ('1925', '1925'), ('1924', '1924'), ('1923', '1923'), ('1922', '1922'), ('1921', '1921'), ('1920', '1920'), ('1919', '1919'), ('1918', '1918'), ('1917', '1917'), ('1916', '1916'), ('1915', '1915'), ('1914', '1914'), ('1913', '1913'), ('1912', '1912'), ('1911', '1911'), ('1910', '1910')], max_length=15, null=True, verbose_name='What is your birth year?')),
                ('birthmonth', models.CharField(blank=True, choices=[('1', 'January'), ('2', 'February'), ('3', 'March'), ('4', 'April'), ('5', 'May'), ('6', 'June'), ('7', 'July'), ('8', 'August'), ('9', 'September'), ('10', 'October'), ('11', 'November'), ('12', 'December')], max_length=15, null=True, verbose_name='What is your birth month?')),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('Other', 'Other')], max_length=10, null=True, verbose_name='Please select your sex')),
                ('details', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='Please give a brief description of the incident')),
                ('source', models.CharField(blank=True, choices=[('BikeMaps team', 'Directly from the BikeMaps.org team'), ('BikeMaps swag', 'BikeMaps.org swag (e.g., seat cover, water bottle, etc.) without meeting the team'), ('Traditional media', 'Traditional media (newspaper, TV, radio)'), ('Another website', 'Link from another website'), ('Word of mouth', 'Word of mouth'), ('Social media', 'Social media (e.g., Twitter, Instagram, Facebook)'), ('Other', 'Other'), ("Don't remember", "I don't remember")], max_length=20, null=True, verbose_name='Where did you first find out about BikeMaps.org?')),
                ('infrastructure_changed', models.BooleanField(default=False, verbose_name='Has the infrastructure been changed?')),
                ('infrastructure_changed_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hazard',
            fields=[
                ('point', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mapApp.point')),
                ('hazard_category', models.CharField(blank=True, choices=[('infrastructure', 'Infrastructure'), ('environmental', 'Environmental'), ('human behaviour', 'Human Behaviour')], max_length=100, null=True, verbose_name='Please select the category of hazard you are reporting:')),
                ('i_type', models.CharField(choices=[('Infrastructure', (('Curb', 'Curb'), ('Island', 'Island'), ('Train track', 'Train track'), ('Pothole', 'Pothole'), ('Road surface', 'Road surface'), ('Poor signage', 'Poor signage'), ('Speed limits', 'Speed limits'), ('Blind corner', 'Blind corner or turn'), ('Bike lane disappears', 'Bike lane disappears'), ('Vehicles enter exit', 'Vehicles entering/exiting roadway'), ('Dooring risk', 'Dooring risk zone'), ('Vehicle in bike lane', 'Vehicle use of bike lane'), ('Dangerous intersection', 'Dangerous intersection'), ('Dangerous vehicle left turn', 'Dangerous vehicle left turn'), ('Dangerous vehicle right turn', 'Dangerous vehicle right turn'), ('Sensor does not detect bikes', 'Sensor does not pick up bikes'), ('Steep hill', 'Steep hill - bike speed affected'), ('Narrow road', 'Narrow road'), ('Pedestrian conflict zone', 'Pedestrian conflict zone'), ('Other infrastructure', 'Other (Please describe)'))), ('Environmental', (('Icy/Snowy', 'Icy/Snowy'), ('Poor visibility', 'Poor visibility (fog, snow, smoke etc.)'), ('Broken glass', 'Broken glass on road'), ('Wet leaves', 'Wet leaves on road'), ('Gravel rocks or debris', 'Gravel, rocks or debris on road/path'), ('Construction', 'Construction'), ('Other', 'Other (Please describe)'))), ('Human Behaviour', (('Poor visibility', 'Poor visibility'), ('Parked car', 'Parked car'), ('Traffic flow', 'Traffic flow'), ('Driver behaviour', 'Driver behaviour'), ('Cyclist behaviour', 'Cyclist behaviour'), ('Pedestrian behaviour', 'Pedestrian behaviour'), ('Congestion', 'Congestion'), ('Other', 'Other (Please describe)')))], max_length=150, verbose_name='What type of hazard was it?')),
                ('regular_cyclist', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=30, null=True, verbose_name='Do you bike at least once a week?')),
                ('expires_date', models.DateTimeField(blank=True, null=True)),
                ('hazard_fixed', models.BooleanField(default=False, verbose_name='Has this been fixed?')),
                ('hazard_fixed_date', models.DateTimeField(blank=True, null=True)),
            ],
            bases=('mapApp.point',),
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('point', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mapApp.point')),
                ('i_type', models.CharField(choices=[('Collision', (('Collision with stationary object or vehicle', 'Collision with a stationary object or vehicle'), ('Collision with moving object or vehicle', 'Collision with a moving object or vehicle'))), ('Near miss', (('Near collision with stationary object or vehicle', 'Near miss with a stationary object or vehicle'), ('Near collision with moving object or vehicle', 'Near miss with a moving object or vehicle'))), ('Fall', (('Fall', 'Lost control and fell'),))], max_length=150, verbose_name='What type of incident was it?')),
                ('incident_with', models.CharField(choices=[('Vehicle', (('Vehicle, head on', 'Head on'), ('Vehicle, side', 'Side impact'), ('Vehicle, angle', 'Angle impact'), ('Vehicle, rear end', 'Rear end'), ('Vehicle, turning right', 'Turning right'), ('Vehicle, turning left', 'Turning left'), ('Vehicle, passing', 'Passing'), ('Vehicle, open door', 'Open vehicle door'))), ('Person/animal', (('Another cyclist', 'Another cyclist'), ('Pedestrian', 'Pedestrian'), ('Animal', 'Animal'), ('E-scooter', 'E-scooter'))), ('Infrastructure', (('Curb', 'Curb'), ('Train Tracks', 'Train Tracks'), ('Pothole', 'Pothole'), ('Lane divider', 'Lane divider'), ('Sign/Post', 'Sign/Post'), ('Roadway', 'Roadway'))), ('Other', 'Other (please describe)')], max_length=100, verbose_name='What sort of object did you collide or nearly collide with?')),
                ('injury', models.CharField(choices=[('Yes', (('Injury, no treatment', 'Medical treatment not required'), ('Injury, saw family doctor', 'Saw a family doctor'), ('Injury, hospital emergency visit', 'Visited the hospital emergency dept.'), ('Injury, hospitalized', 'Overnight stay in hospital'))), ('No', (('No injury', 'No injury'),)), ('Unknown', (('Unknown', "I don't know"),))], max_length=50, verbose_name='Were you injured?')),
                ('trip_purpose', models.CharField(blank=True, choices=[('Commute', 'To/from work or school'), ('Exercise or recreation', 'Exercise or recreation'), ('Social reason', 'Social reason (e.g., movies, visit friends)'), ('Personal business', 'Personal business'), ('During work', 'During work')], max_length=50, null=True, verbose_name='What was the purpose of your trip?')),
                ('regular_cyclist', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=50, null=True, verbose_name='Do you bike at least once a week?')),
                ('helmet', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=50, null=True, verbose_name='Were you wearing a helmet?')),
                ('intoxicated', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=50, null=True, verbose_name='Were you intoxicated?')),
                ('road_conditions', models.CharField(blank=True, choices=[('Dry', 'Dry'), ('Wet', 'Wet'), ('Loose sand, gravel, or dirt', 'Loose sand, gravel, or dirt'), ('Icy', 'Icy'), ('Snowy', 'Snowy'), ("Don't remember", "I don't remember")], max_length=50, null=True, verbose_name='What were the road conditions?')),
                ('sightlines', models.CharField(blank=True, choices=[('No obstructions', 'No obstructions'), ('View obstructed', 'View obstructed'), ('Glare or reflection', 'Glare or reflection'), ('Obstruction on road', 'Obstruction on road'), ("Don't Remember", "Don't Remember")], max_length=50, null=True, verbose_name='How were the sight lines?')),
                ('cars_on_roadside', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=50, null=True, verbose_name='Were there cars parked on the roadside')),
                ('bike_lights', models.CharField(blank=True, choices=[('NL', 'No Lights'), ('FB', 'Front and back lights'), ('F', 'Front lights only'), ('B', 'Back lights only'), ("Don't remember", "I don't remember")], max_length=200, null=True, verbose_name='Were you using bike lights?')),
                ('terrain', models.CharField(blank=True, choices=[('Uphill', 'Uphill'), ('Downhill', 'Downhill'), ('Flat', 'Flat'), ("Don't remember", "I don't remember")], max_length=50, null=True, verbose_name='What was the terrain like?')),
                ('direction', models.CharField(blank=True, choices=[('N', 'N'), ('NE', 'NE'), ('E', 'E'), ('SE', 'SE'), ('S', 'S'), ('SW', 'SW'), ('W', 'W'), ('NW', 'NW'), ("I don't know", "I don't know")], max_length=50, null=True, verbose_name='What direction were you heading?')),
                ('turning', models.CharField(blank=True, choices=[('Heading straight', 'Heading straight'), ('Turning left', 'Turning left'), ('Turning right', 'Turning right'), ("I don't remember", "I don't remember")], max_length=50, null=True, verbose_name='How were you moving?')),
                ('intersection', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=50, null=True, verbose_name='Did the incident occur at an intersection?')),
                ('aggressive', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=50, null=True, verbose_name='Was the driver aggressive?')),
                ('impact', models.CharField(choices=[('None', 'No impact'), ('More careful', "I'm now more careful about where/when/how I ride"), ('Bike less', 'I bike less'), ('More careful and bike less', "I'm now more careful about where/when/how I ride AND I bike less"), ('Stopped biking', "I haven't biked since"), ('Too soon', 'Too soon to say'), ('Witness', 'I was not directly involved')], max_length=50, null=True, verbose_name='How did this incident impact your bicycling?')),
                ('bicycle_type', models.CharField(blank=True, choices=[('Personal', "Personal (my own bicycle or a friend's)"), ('Bike share', 'Bike share'), ('Bike rental', 'Bike rental'), ('E-scooter', 'E-scooter')], max_length=20, null=True, verbose_name='What type of bicycle were you riding?')),
                ('ebike', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ("I don't know", "I don't know")], max_length=20, null=True, verbose_name='Did the incident involve a pedal-assist electric bike (eBike)?')),
                ('witness_vehicle', models.CharField(blank=True, choices=[('Bicycle', 'Bicycle'), ('E-scooter', 'E-scooter'), ('Pedestrian', 'I was a pedestrian'), ('Driving', 'I was driving')], max_length=20, null=True, verbose_name='What were you riding?')),
                ('personal_involvement', models.CharField(choices=[('Yes', 'Yes, this happened to me'), ('No', 'No, I witnessed this happen to someone else')], max_length=20, verbose_name='Were you directly involved in the incident?')),
                ('riding_on', models.CharField(blank=True, choices=[('Busy street', (('Busy street cycle track', 'On a cycle track (separated bike lane)'), ('Busy street bike lane', 'On a painted bike lane'), ('Busy street, no bike facilities', 'On a street with no bicycle facility'))), ('Quiet street', (('Quiet street bike lane', 'On a local street bikeway (bike route)'), ('Quiet street, no bike facilities', 'On a street with no bicycle facility'))), ('Off-Street', (('Cycle track', 'On a physically separated bike lane (cycle track)'), ('Mixed use trail', 'On a multi-use path'), ('Sidewalk', 'On a sidewalk'))), ("Don't remember", "I don't remember")], max_length=50, null=True, verbose_name='Where were you riding your bike?')),
            ],
            bases=('mapApp.point',),
        ),
        migrations.CreateModel(
            name='NewInfrastructure',
            fields=[
                ('point', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mapApp.point')),
                ('infra_type', models.CharField(max_length=150, verbose_name='What type of new infrastructure is it?')),
                ('dateAdded', models.DateTimeField(default=None, verbose_name='When was the new infrastructure added?')),
                ('infraDetails', models.TextField(blank=True, default='Previously reported incidents and hazards in the area were reset.', max_length=300, null=True, verbose_name='Please give a brief description of the new infrastructure')),
                ('expires_date', models.DateTimeField(blank=True, null=True, verbose_name='When should the new infrastructure icon expire?')),
            ],
            bases=('mapApp.point',),
        ),
        migrations.CreateModel(
            name='Theft',
            fields=[
                ('point', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mapApp.point')),
                ('i_type', models.CharField(choices=[('Bike (value < $1000)', 'Bike (value < $1000)'), ('Bike (value >= $1000)', 'Bike (value >= $1000)'), ('Major bike component', 'Major bike component (e.g. tire, seat, handlebars, etc.)'), ('Minor bike component', 'Minor bike component (e.g. lights, topbar padding, bell, etc.)')], max_length=100, verbose_name='What was stolen?')),
                ('how_locked', models.CharField(choices=[('Yes', (('Frame locked', 'Frame locked'), ('Frame and tire locked', 'Frame and tire locked'), ('Frame and both tires locked', 'Frame and both tires locked'), ('Tire(s) locked', 'Tire(s) locked'))), ('No', (('Not locked', 'Not locked'),))], max_length=100, verbose_name='Did you have your bike locked?')),
                ('lock', models.CharField(choices=[('U-Lock', 'U-Lock'), ('Cable lock', 'Cable lock'), ('U-Lock and cable', 'U-Lock and cable'), ('Padlock', 'Padlock'), ('NA', 'Not locked')], max_length=100, verbose_name='What kind of lock were you using?')),
                ('locked_to', models.CharField(choices=[('Outdoor bike rack', 'At an outdoor bike rack'), ('Indoor bike rack', 'At an indoor bike rack (e.g. parking garage, bike room)'), ('Bike locker', 'Inside a bike locker'), ('Street sign', 'Against street sign'), ('Fence/railing', 'Against a fence or railing'), ('Bench', 'Against a public bench'), ('Indoors/lobby', 'Inside a building/lobby'), ('Other', 'Other (please describe)')], max_length=100, verbose_name='Where did you leave your bike?')),
                ('lighting', models.CharField(choices=[('Good', 'Well lit (e.g. bright daylight)'), ('Moderate', 'Moderately well lit (e.g. streetlights, parking garage)'), ('Poor', 'Poorly lit (e.g. night, unlit alleyway)'), ("I don't know", "I don't know")], max_length=100, verbose_name='Which describes the lighting conditions where and when the theft occurred?')),
                ('traffic', models.CharField(choices=[('Very High', 'Very heavy (pedestrians passing by in a nearly constant stream)'), ('High', 'Heavy (pedestrians passing by regularly)'), ('Medium', 'Moderate (irregular pedestrian with busy vehicle traffic)'), ('Low', 'Light (irregular pedestrian with light to moderate vehicle traffic)'), ('Very Low', 'Very light (little pedestrian and vehicle traffic)'), ("I don't know", "I don't know")], max_length=100, verbose_name='Which best describes the traffic in the area where the theft occurred?')),
                ('police_report', models.NullBooleanField(choices=[(True, 'Yes'), (False, 'No')], verbose_name='Did you file a report with the police?')),
                ('police_report_num', models.CharField(blank=True, max_length=100, null=True, verbose_name='If you filed a police report, what is the report number?')),
                ('insurance_claim', models.NullBooleanField(choices=[(True, 'Yes'), (False, 'No')], verbose_name='Did you file an insurance claim?')),
                ('insurance_claim_num', models.CharField(blank=True, max_length=100, null=True, verbose_name='If you filed an insurance claim, what is the claim number?')),
                ('regular_cyclist', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ("I don't know", "I don't know")], max_length=30, null=True, verbose_name='Do you bike at least once a week?')),
            ],
            bases=('mapApp.point',),
        ),
        migrations.CreateModel(
            name='AlertArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('email', models.EmailField(max_length=254, verbose_name='Current email')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='AdministrativeArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('description', models.CharField(max_length=200)),
                ('users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='users')),
            ],
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('incident', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='mapApp.incident')),
                ('summary', models.CharField(max_length=250, verbose_name='Summary')),
                ('sunrise_time', models.DateTimeField(verbose_name='Sunrise time')),
                ('sunset_time', models.DateTimeField(verbose_name='Sunset time')),
                ('dawn', models.BooleanField(verbose_name='The accident occurred at dawn')),
                ('dusk', models.BooleanField(verbose_name='The accident occurred at dusk')),
                ('precip_intensity', models.FloatField(verbose_name='Precipitation intensity (mm/h)')),
                ('precip_probability', models.FloatField(verbose_name='Precipitation probability')),
                ('precip_type', models.CharField(max_length=50, verbose_name='Type of precipitation')),
                ('temperature', models.FloatField(verbose_name='Temperature (C)')),
                ('black_ice_risk', models.BooleanField(verbose_name='Black ice risk present')),
                ('wind_speed', models.FloatField(verbose_name='Wind speed (km/h)')),
                ('wind_bearing', models.FloatField(verbose_name='Wind bearing (deg)')),
                ('wind_bearing_str', models.CharField(max_length=5, verbose_name='Wind bearing')),
                ('visibility_km', models.FloatField(verbose_name='Visibility (km)')),
            ],
            options={
                'verbose_name': 'Weather',
                'verbose_name_plural': 'Weather',
            },
        ),
        migrations.CreateModel(
            name='TheftNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('action', models.IntegerField(choices=[(0, 'Incident'), (1, 'Near miss'), (2, 'Hazard'), (3, 'Theft'), (4, 'Undefined')], default=4)),
                ('is_read', models.BooleanField(default=False)),
                ('emailed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='theftNotification', to='mapApp.theft')),
            ],
            options={
                'verbose_name': 'alert notification',
                'verbose_name_plural': 'alert notifications',
                'ordering': ['-date'],
                'abstract': False,
                'unique_together': {('user', 'point')},
            },
        ),
        migrations.CreateModel(
            name='IncidentNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('action', models.IntegerField(choices=[(0, 'Incident'), (1, 'Near miss'), (2, 'Hazard'), (3, 'Theft'), (4, 'Undefined')], default=4)),
                ('is_read', models.BooleanField(default=False)),
                ('emailed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incidentNotification', to='mapApp.incident')),
            ],
            options={
                'verbose_name': 'alert notification',
                'verbose_name_plural': 'alert notifications',
                'ordering': ['-date'],
                'abstract': False,
                'unique_together': {('user', 'point')},
            },
        ),
        migrations.CreateModel(
            name='HazardNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('action', models.IntegerField(choices=[(0, 'Incident'), (1, 'Near miss'), (2, 'Hazard'), (3, 'Theft'), (4, 'Undefined')], default=4)),
                ('is_read', models.BooleanField(default=False)),
                ('emailed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hazardNotification', to='mapApp.hazard')),
            ],
            options={
                'verbose_name': 'alert notification',
                'verbose_name_plural': 'alert notifications',
                'ordering': ['-date'],
                'abstract': False,
                'unique_together': {('user', 'point')},
            },
        ),
    ]
